@using MVC.Domain.Models;
@using MVC.Domain.SupClass;
@using MVC.Service.Service;
@using Newtonsoft.Json;
@using System.Text;
@using Microsoft.AspNetCore.SignalR;
@model IEnumerable<Message>
<head>
</head>
<p class="userNotif">Currently logged in as @MVC.Domain.SupClass.AppMain.User.Username</p>
<p class="serverNotif">Currently in the server @AppMain.User.Server and channel @AppMain.Servers.Channels</p>
<p class="channelNotif"></p>
@{
    AppMain.Message = new MVC.Domain.Models.Message();
}
<link href='https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css' rel='stylesheet'>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>


<style>
    .userNotif {
        color: white;
        max-width: 100%;
    }

    .serverNotif {
        color: white;
        max-width: 100%;
    }

    #ChatDiv {
        background-color: #fed9ff;
        width: 1295px;
        height: 500px;
        overflow-x: hidden;
        overflow-y: auto;
        text-align: center;
        padding: 20px;
        background-color: lightslategray;
        overflow: auto;
        display: flex;
        flex-direction: column-reverse;
        max-width: 100%;
        border-radius: 30px 5px 0px 0px;
    }

    body {
        background-color: #081b29;
        max-width: 100%;
    }
    /* width */
    ::-webkit-scrollbar {
        width: 20px;
    }

    /* Track */
    ::-webkit-scrollbar-track {
        box-shadow: inset 0 0 5px grey;
        border-radius: 10px;
    }

    /* Handle */
    ::-webkit-scrollbar-thumb {
        background: red;
        border-radius: 10px;
    }

    .btnSend {
        background: #081b29;
        color: blanchedalmond;
        border: double;
        border-radius: 5px;
        max-width: 100%;
    }

    .msginput {
        width: 1200px;
        height: 50px;
        max-width: 100%;
        border-radius: 30px;
        background-color: gray;
    }

    .HomeButton {
        position: fixed;
        left: 0;
        background-color: lightgray;
        border-radius: 12px;
        top: 5px;
        max-width: 100%;
    }

        .HomeButton:hover {
            background-color: #6e65f3;
            border-radius: 6px;
            max-width: 100%;
        }

    .optionButtons {
        background-color: #081b29;
        border: 1px solid green; /* Green border */
        color: white; /* White text */
        cursor: pointer; /* Pointer/hand icon */
        /*float: left;*/ /* Float the buttons side by side */
    }
</style>
<header class="topbuttons">
    <form method="post">
        <button class="logoutButton" asp-controller="Home" asp-action="LogOut"><i class='bx bx-log-out'></i></button>
        <button type="submit" class="HomeButton" asp-controller="Home" asp-action="Home"><i class='bx bx-home'></i></button>
        <button class="getbacktoChoosingserver" asp-controller="Home" asp-action="GetBackToChoosingServer">Change Server</button>
    </form>
</header>

@*set the messages*@
<form method="post">

    <div class="scroll" id="ChatDiv">
        @*@foreach (var item in Model)
        {
        <div style="border:thin solid black">
        <h8  id="serverBox">Server: @item.Server</h8>
        <h8  id="channelBox">Channel: @item.Channel</h8>
        <p   id="timeBox">Time: @item.SenderTime</p>
        <div class="button-group">
        <button class="optionButtons" name="friendName" type="submit" value="@item.SenderName" asp-controller="Home" asp-action="RemoveFromFriendList">Remove From Friendlist</button>
        <button class="optionButtons" name="friendName" type="submit" value="@item.SenderName" asp-controller="Home" asp-action="FriendChatPanel">Message</button>
        <button class="optionButtons" name="friendName" type="submit" value="@item.SenderName" asp-controller="Home" asp-action="BlockUser">Block</button>
        </div>
        <p  id="senderBox">Message By: @item.SenderName</p>
        <p  id="messageBox">Message: @item.Message1</p>
        </div>
        }*@
    </div>
</form>
@*send message*@
<form method="post">
    <input style="border:thick solid black" value="" name="messageInput" type="text" class="msginput" id="msgInput" asp-for="@AppMain.Message.Message1" />
    <button type="submit" class="btnSend" value="messageInput" @*asp-controller="Home" asp-action="SendMessage"*@><i class='bx bxs-send'></i></button>
</form>
<script>
    $(document).ready(function () 
    {
        // Define a function to retrieve and process the JSON list
        function retrieveJsonList() 
        {
            $.ajax({
                url: '@Url.Action("ReloadChatScreen", "Home")',
                type: 'GET',
                dataType: 'json',
                success: function (data) {
                    // Clear the existing <p> components
                    //$('#ChatDiv').remove();
                    $('#ChatDiv').empty();
                    // Iterate over the JSON list and create <p> components
                    data.forEach(function (item) {
                        var idPara = document.createElement("h6");
                                                            idPara.classList.add('idBox');
                        var serverPara = document.createElement("h6");
                        serverPara.classList.add('serverBox');

                        var channelPara = document.createElement("p");
                        channelPara.classList.add('channelBox')

                        var timePara = document.createElement("p");
                        timePara.classList.add('timeBox')

                        var senderPara = document.createElement("p");
                        senderPara.classList.add('senderBox');

                        var messagePara = document.createElement("p");
                        messagePara.classList.add('messageBox');

                        serverPara.textContent = item.server;
                        channelPara.textContent = item.channel;
                        timePara.textContent = item.senderTime;
                        senderPara.textContent = item.senderName;
                        messagePara.textContent = item.message1;
                        idPara.textContent=item.id;
                        //$('#ChatDiv').append(serverPara);
                        //$('#ChatDiv').append(channelPara);
                        $('#ChatDiv').append(timePara);
                        $('#ChatDiv').append(senderPara);
                        $('#ChatDiv').append(messagePara);
                        $('#ChatDiv').append(idPara);
                        $('#ChatDiv').css('background-color', '#fed9ff');
                        //$('#serverPara').css();
                        //$('#channelPara').css();
                        //$('#timePara').css();
                        //$('#senderPara').css();
                        //$('#messagePara').css();
                        //try to design them maybe?
                    });
                },
                error: function (xhr, status, error) {
                    console.error(error);
                }
            });
        }

        // Call the function initially
        retrieveJsonList();

        // Call the function every 5 seconds
        setInterval(retrieveJsonList, 1000);
    });
    document.getElementById('msgInput').addEventListener('keypress', function (event) {
        if (event.key === 'Enter') {
            event.preventDefault(); // Prevent the default form submission

            var messageInput = document.getElementById('msgInput').value;
            var formData = new FormData();
            formData.append('messageInput', messageInput);

            var xhr = new XMLHttpRequest();
            xhr.open('POST', '/Home/SendMessage', true);
            xhr.onload = function () 
            {
                if (xhr.status === 200) 
                {
                    // Request was successful
                    console.log(xhr.responseText);
                    function retrieveJsonList() 
                    {
                        $.ajax({
                            url: '@Url.Action("ReloadChatScreen", "Home")',
                            type: 'GET',
                            dataType: 'json',
                            success: function (data) {
                                // Clear the existing <p> components
                                //$('#ChatDiv').remove();
                                $('#ChatDiv').empty();
                                // Iterate over the JSON list and create <p> components
                                data.forEach(function (item) {
                                    var idPara = document.createElement("h6");
                                    idPara.classList.add('idBox');

                                    var serverPara = document.createElement("h6");
                                    serverPara.classList.add('serverBox');

                                    var channelPara = document.createElement("p");
                                    channelPara.classList.add('channelBox')

                                    var timePara = document.createElement("p");
                                    timePara.classList.add('timeBox')

                                    var senderPara = document.createElement("p");
                                    senderPara.classList.add('senderBox');

                                    var messagePara = document.createElement("p");
                                    messagePara.classList.add('messageBox');
                                    serverPara.textContent = item.server;
                                    channelPara.textContent = item.channel;
                                    timePara.textContent = item.senderTime;
                                    senderPara.textContent = item.senderName;
                                    messagePara.textContent = item.message1;
                                    idPara.textContent=item.Id;
                                    //$('#ChatDiv').append(serverPara);
                                    //$('#ChatDiv').append(channelPara);
                                    $('#ChatDiv').append(timePara);
                                    $('#ChatDiv').append(senderPara);
                                    $('#ChatDiv').append(idPara);
                                    $('#ChatDiv').append(messagePara);

                                    $('#ChatDiv').css('background-color', '#fed9ff');
                                    //$('#serverPara').css();
                                    //$('#channelPara').css();
                                    //$('#timePara').css();
                                    //$('#senderPara').css();
                                    //$('#messagePara').css();
                                    //try to design them maybe?
                                });
                            },
                            error: function (xhr, status, error) {
                                console.error(error);
                            }
                        });
                    }
                } else {
                    // Request failed
                    console.error(xhr.statusText);
                }
            };
            xhr.onerror = function () {
                console.error('Error occurred while sending the request.');
            };
            xhr.send(formData);
        }
    });
    document.addEventListener('contextmenu', function(event) {
        event.preventDefault();
      var targetElement = event.target;
    
      if (targetElement.classList.contains('idBox')) {
        event.preventDefault(); // Prevent the default context menu from appearing
    
        // Create a new table element
        var table = document.createElement('table');
        table.classList.add('popupTable'); // Add a class to the table for styling purposes
    
        // Set the table's position to be absolute
        table.style.position = 'absolute';
    
        // Set the table's top and left positions based on the mouse coordinates
        table.style.top = event.clientY + 'px';
        table.style.left = event.clientX + 'px';
    
        // Create rows and cells
        
          var row = document.createElement('tr');
            var cell = document.createElement('button');
            cell.textContent = 'Delete Message';
            row.appendChild(cell);
          table.appendChild(row);
    
        // Append the table to the document body
        document.body.appendChild(table);
    
        // Add a mouseleave event listener to the table
        table.addEventListener('mouseleave', function() {
          // Remove the table from the document body when the mouse leaves it
          document.body.removeChild(table);
        });
      }
      // Add onclick event listener to the cell
          cell.addEventListener('click', function(event) 
          {
              event.preventDefault();
           var messageToDelete=targetElement.textContent;
           var formData = new FormData();
           formData.append('messageToDelete', messageToDelete);
           var xhr = new XMLHttpRequest();
           xhr.open('POST', '/Home/DeleteMessage', true);
           xhr.onload = function () 
                       {
                           if (xhr.status === 200) 
                           {
                               // Request was successful
                               console.log(xhr.responseText);
                               function retrieveJsonList() 
                               {
                                   $.ajax({
                                       url: '@Url.Action("ReloadChatScreen", "Home")',
                                       type: 'GET',
                                       dataType: 'json',
                                       success: function (data) {
                                           // Clear the existing <p> components
                                           //$('#ChatDiv').remove();
                                           $('#ChatDiv').empty();
                                           // Iterate over the JSON list and create <p> components
                                           data.forEach(function (item) {
                                               var idPara = document.createElement("h6");
                                               idPara.classList.add('idBox');
                                               var serverPara = document.createElement("h6");
                                               serverPara.classList.add('serverBox');
           
                                               var channelPara = document.createElement("p");
                                               channelPara.classList.add('channelBox')
           
                                               var timePara = document.createElement("p");
                                               timePara.classList.add('timeBox')
           
                                               var senderPara = document.createElement("p");
                                               senderPara.classList.add('senderBox');
           
                                               var messagePara = document.createElement("p");
                                               messagePara.classList.add('messageBox');
                                               serverPara.textContent = item.server;
                                               channelPara.textContent = item.channel;
                                               timePara.textContent = item.senderTime;
                                               senderPara.textContent = item.senderName;
                                               messagePara.textContent = item.message1;
                                               idPara.textContent=item.id;
                                               //$('#ChatDiv').append(serverPara);
                                               //$('#ChatDiv').append(channelPara);
                                               $('#ChatDiv').append(timePara);
                                               $('#ChatDiv').append(senderPara);
                                               $('#ChatDiv').append(messagePara);
                                               $('#ChatDiv').append(idPara);
                                               $('#ChatDiv').css('background-color', '#fed9ff');
                                               //$('#serverPara').css();
                                               //$('#channelPara').css();
                                               //$('#timePara').css();
                                               //$('#senderPara').css();
                                               //$('#messagePara').css();
                                               //try to design them maybe?
                                           });
                                       },
                                       error: function (xhr, status, error) {
                                           console.error(error);
                                       }
                                   });
                               }
                           } else {
                               // Request failed
                               console.error(xhr.statusText);
                           }
                       };
                       xhr.onerror = function () {
                           console.error('Error occurred while sending the request.');
                       };
                       xhr.send(formData);
                   });
    });
    
</script>

